BeforeAll {
    Import-Module ./SkyScalpel.psd1
}

Describe 'Format-JsonObject -TrackModification -Target JsonToken' -Tag 'Format-JsonObject','TrackModification','JsonToken' {
    Context 'formatting JsonToken tokens in policy (basic)' -Tag 'basic' {
        BeforeAll {
            $json = '{"Name":"SkyScalpel"}'
            $tokens = $json | Add-RandomWhitespace -RandomNodePercent 100 -RandomLength 5 -TrackModification -Target JsonToken
            $tokens = $tokens | Format-JsonObject -TrackModification -Target JsonToken
        }

        It 'should return token count' {
            $tokens.Count | Should -BeExactly 10
        }

        It 'should return Start for all tokens' {
            $tokens.ForEach( { $_.Start } ) | Should -BeExactly @(0,1,6,12,17,18,23,35,40,41)
        }

        It 'should return Length for all tokens' {
            $tokens.ForEach( { $_.Length } ) | Should -BeExactly @(1,5,6,5,1,5,12,5,1,5)
        }

        It 'should return Depth for all tokens' {
            $tokens.ForEach( { $_.Depth } ) | Should -BeExactly @(0,1,1,1,1,1,1,1,0,0)
        }

        It 'should return Modified for all tokens' {
            $tokens.ForEach( { $_.Modified } ) | Should -BeExactly @($null,$true,$null,$true,$null,$true,$null,$true,$null,$true)
        }

        It 'should return Type (and potential SubType and Format) for all tokens' {
            $tokensTypeSubType = $tokens.ForEach( { @($_.Type,$_.SubType,$_.Format).Where( { $_ } ) -join '.' } )
            $tokensTypeSubType | Should -BeExactly @('BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace')
        }

        It 'should return Content for all tokens' {
            $tokens.ForEach( { $_.Content } ) | Should -BeExactly @('{','     ','"Name"','     ',':','     ','"SkyScalpel"','     ','}','     ')
        }

        It 'should return re-concatenated Content for all tokens' {
            -join$tokens.ForEach( { $_.Content } ) | Should -BeExactly '{     "Name"     :     "SkyScalpel"     }     '
        }
    }

    Context 'formatting JsonToken tokens in policy (intermediate)' -Tag 'intermediate' {
        BeforeAll {
            $json = '{"Company":"Permiso Security","Tags":["Cloud","Identity","Security","CDR (Cloud Detection & Response)"],"IDs":[116,943,234.567,-38793.1],"Team":{"Name":"p0 Labs","Members":[{"FirstName":"Andi","LastName":"Ahmeti"},{"FirstName":"Mela","LastName":"Elezaj"},{"FirstName":"Enisa","LastName":"Hoxhaxhiku"},{"FirstName":"Abian","LastName":"Morina"}]},"MixedArray":["string",true,false,null,1337,13.37,-13.37]}'
            $tokens = $json | Add-RandomWhitespace -RandomNodePercent 100 -RandomLength 5 -TrackModification -Target JsonToken
            $tokens = $tokens | Format-JsonObject -TrackModification -Target JsonToken
        }

        It 'should return token count' {
            $tokens.Count | Should -BeExactly 198
        }

        It 'should return Start for all tokens' {
            $tokens.ForEach( { $_.Start } ) | Should -BeExactly @(0,1,6,15,20,21,26,44,49,50,55,61,66,67,72,73,78,85,90,91,96,106,111,112,117,127,132,133,138,172,177,178,183,184,189,194,199,200,205,206,211,214,219,220,225,228,233,234,239,246,251,252,257,265,270,271,276,277,282,288,293,294,299,300,305,311,316,317,322,331,336,337,342,351,356,357,362,363,368,369,374,385,390,391,396,402,407,408,413,423,428,429,434,442,447,448,453,454,459,460,465,476,481,482,487,493,498,499,504,514,519,520,525,533,538,539,544,545,550,551,556,567,572,573,578,585,590,591,596,606,611,612,617,629,634,635,640,641,646,647,652,663,668,669,674,681,686,687,692,702,707,708,713,721,726,727,732,733,738,739,744,745,750,762,767,768,773,774,779,787,792,793,798,802,807,808,813,818,823,824,829,833,838,839,844,848,853,854,859,864,869,870,875,881,886,887,892,893)
        }

        It 'should return Length for all tokens' {
            $tokens.ForEach( { $_.Length } ) | Should -BeExactly @(1,5,9,5,1,5,18,5,1,5,6,5,1,5,1,5,7,5,1,5,10,5,1,5,10,5,1,5,34,5,1,5,1,5,5,5,1,5,1,5,3,5,1,5,3,5,1,5,7,5,1,5,8,5,1,5,1,5,6,5,1,5,1,5,6,5,1,5,9,5,1,5,9,5,1,5,1,5,1,5,11,5,1,5,6,5,1,5,10,5,1,5,8,5,1,5,1,5,1,5,11,5,1,5,6,5,1,5,10,5,1,5,8,5,1,5,1,5,1,5,11,5,1,5,7,5,1,5,10,5,1,5,12,5,1,5,1,5,1,5,11,5,1,5,7,5,1,5,10,5,1,5,8,5,1,5,1,5,1,5,1,5,12,5,1,5,1,5,8,5,1,5,4,5,1,5,5,5,1,5,4,5,1,5,4,5,1,5,5,5,1,5,6,5,1,5,1,5)
        }

        It 'should return Depth for all tokens' {
            $tokens.ForEach( { $_.Depth } ) | Should -BeExactly @(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,0,0)
        }

        It 'should return Modified for all tokens' {
            $tokens.ForEach( { $_.Modified } ) | Should -BeExactly @($null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true)
        }

        It 'should return Type (and potential SubType and Format) for all tokens' {
            $tokensTypeSubType = $tokens.ForEach( { @($_.Type,$_.SubType,$_.Format).Where( { $_ } ) -join '.' } )
            $tokensTypeSubType | Should -BeExactly @('BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','EndArray','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','EndArray','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','EndArray','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Boolean','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Boolean','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Null','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','EndArray','Whitespace','EndObject','Whitespace')
        }

        It 'should return Content for all tokens' {
            $tokens.ForEach( { $_.Content } ) | Should -BeExactly @('{','     ','"Company"','     ',':','     ','"Permiso Security"','     ',',','     ','"Tags"','     ',':','     ','[','     ','"Cloud"','     ',',','     ','"Identity"','     ',',','     ','"Security"','     ',',','     ','"CDR (Cloud Detection & Response)"','     ',']','     ',',','     ','"IDs"','     ',':','     ','[','     ','116','     ',',','     ','943','     ',',','     ','234.567','     ',',','     ','-38793.1','     ',']','     ',',','     ','"Team"','     ',':','     ','{','     ','"Name"','     ',':','     ','"p0 Labs"','     ',',','     ','"Members"','     ',':','     ','[','     ','{','     ','"FirstName"','     ',':','     ','"Andi"','     ',',','     ','"LastName"','     ',':','     ','"Ahmeti"','     ','}','     ',',','     ','{','     ','"FirstName"','     ',':','     ','"Mela"','     ',',','     ','"LastName"','     ',':','     ','"Elezaj"','     ','}','     ',',','     ','{','     ','"FirstName"','     ',':','     ','"Enisa"','     ',',','     ','"LastName"','     ',':','     ','"Hoxhaxhiku"','     ','}','     ',',','     ','{','     ','"FirstName"','     ',':','     ','"Abian"','     ',',','     ','"LastName"','     ',':','     ','"Morina"','     ','}','     ',']','     ','}','     ',',','     ','"MixedArray"','     ',':','     ','[','     ','"string"','     ',',','     ','true','     ',',','     ','false','     ',',','     ','null','     ',',','     ','1337','     ',',','     ','13.37','     ',',','     ','-13.37','     ',']','     ','}','     ')
        }

        It 'should return re-concatenated Content for all tokens' {
            -join$tokens.ForEach( { $_.Content } ) | Should -BeExactly '{     "Company"     :     "Permiso Security"     ,     "Tags"     :     [     "Cloud"     ,     "Identity"     ,     "Security"     ,     "CDR (Cloud Detection & Response)"     ]     ,     "IDs"     :     [     116     ,     943     ,     234.567     ,     -38793.1     ]     ,     "Team"     :     {     "Name"     :     "p0 Labs"     ,     "Members"     :     [     {     "FirstName"     :     "Andi"     ,     "LastName"     :     "Ahmeti"     }     ,     {     "FirstName"     :     "Mela"     ,     "LastName"     :     "Elezaj"     }     ,     {     "FirstName"     :     "Enisa"     ,     "LastName"     :     "Hoxhaxhiku"     }     ,     {     "FirstName"     :     "Abian"     ,     "LastName"     :     "Morina"     }     ]     }     ,     "MixedArray"     :     [     "string"     ,     true     ,     false     ,     null     ,     1337     ,     13.37     ,     -13.37     ]     }     '
        }
    }

    Context 'formatting JsonToken tokens in policy (advanced)' -Tag 'advanced' {
        BeforeAll {
            $json = '{ "Com\u0070a\u006ey" :  "Pe\u0072miso\u0020Securi\u0074y" ,  "T\u0061gs"    : [ "Clo\u0075d"   , "Identity" , "Sec\u0075\u0072ity"    ,  "CDR (Cloud\u0020D\u0065tecti\u006fn \u0026 Respo\u006es\u0065)"  ]  , "IDs"    :    [  116 ,  943 ,  234.567    ,   -38793.1 ]   ,   "Tea\u006d"   : {    "Name"   :  "p\u0030 Lab\u0073" ,   "M\u0065m\u0062ers"   :   [    {    "FirstName"  :  "An\u0064i"    , "\u004cast\u004e\u0061\u006de" : "A\u0068m\u0065ti"  } ,    {  "\u0046\u0069\u0072stN\u0061\u006d\u0065"    :    "M\u0065la"  ,    "L\u0061stNa\u006de"   :   "Elezaj" }  ,  {    "Fi\u0072\u0073t\u004eame" : "Enisa"  , "Last\u004eame" :   "H\u006fxhaxhi\u006b\u0075" }    , {  "Firs\u0074Nam\u0065"    :    "A\u0062ia\u006e"   , "\u004cas\u0074Nam\u0065"    : "\u004d\u006f\u0072ina"  } ]  }    ,  "Mix\u0065\u0064Arra\u0079" :  [    "\u0073\u0074ri\u006e\u0067"    ,   true  ,  false ,    null    , 1337 ,    13.37 ,   -13.37   ]   } '
            $tokens = $json | Add-RandomWhitespace -RandomNodePercent 100 -RandomLength 5 -TrackModification -Target JsonToken
            $tokens = $tokens | Format-JsonObject -TrackModification -Target JsonToken
        }

        It 'should return token count' {
            $tokens.Count | Should -BeExactly 198
        }

        It 'should return Start for all tokens' {
            $tokens.ForEach( { $_.Start } ) | Should -BeExactly @(0,1,12,31,42,43,55,88,99,100,112,123,137,138,149,150,161,173,186,187,198,208,219,220,231,251,265,266,278,342,354,355,367,368,379,384,398,399,413,414,426,429,440,441,453,456,467,468,480,487,501,502,515,523,534,535,548,549,562,573,586,587,598,599,613,619,632,633,645,664,675,676,689,708,721,722,735,736,750,751,765,776,788,789,801,812,826,827,838,868,879,880,891,909,921,922,933,934,948,949,961,1002,1016,1017,1031,1042,1054,1055,1069,1089,1102,1103,1116,1124,1135,1136,1148,1149,1161,1162,1176,1202,1213,1214,1225,1232,1244,1245,1256,1271,1282,1283,1296,1323,1334,1335,1349,1350,1361,1362,1374,1395,1409,1410,1424,1441,1454,1455,1466,1491,1505,1506,1517,1540,1552,1553,1564,1565,1577,1578,1592,1593,1605,1632,1643,1644,1656,1657,1671,1699,1713,1714,1727,1731,1743,1744,1756,1761,1772,1773,1787,1791,1805,1806,1817,1821,1832,1833,1847,1852,1863,1864,1877,1883,1896,1897,1910,1911)
        }

        It 'should return Length for all tokens' {
            $tokens.ForEach( { $_.Length } ) | Should -BeExactly @(1,11,19,11,1,12,33,11,1,12,11,14,1,11,1,11,12,13,1,11,10,11,1,11,20,14,1,12,64,12,1,12,1,11,5,14,1,14,1,12,3,11,1,12,3,11,1,12,7,14,1,13,8,11,1,13,1,13,11,13,1,11,1,14,6,13,1,12,19,11,1,13,19,13,1,13,1,14,1,14,11,12,1,12,11,14,1,11,30,11,1,11,18,12,1,11,1,14,1,12,41,14,1,14,11,12,1,14,20,13,1,13,8,11,1,12,1,12,1,14,26,11,1,11,7,12,1,11,15,11,1,13,27,11,1,14,1,11,1,12,21,14,1,14,17,13,1,11,25,14,1,11,23,12,1,11,1,12,1,14,1,12,27,11,1,12,1,14,28,14,1,13,4,12,1,12,5,11,1,14,4,14,1,11,4,11,1,14,5,11,1,13,6,13,1,13,1,11)
        }

        It 'should return Depth for all tokens' {
            $tokens.ForEach( { $_.Depth } ) | Should -BeExactly @(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,0,0)
        }

        It 'should return Modified for all tokens' {
            $tokens.ForEach( { $_.Modified } ) | Should -BeExactly @($null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true)
        }

        It 'should return Type (and potential SubType and Format) for all tokens' {
            $tokensTypeSubType = $tokens.ForEach( { @($_.Type,$_.SubType,$_.Format).Where( { $_ } ) -join '.' } )
            $tokensTypeSubType | Should -BeExactly @('BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','EndArray','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','EndArray','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','EndArray','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Boolean','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Boolean','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Null','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','EndArray','Whitespace','EndObject','Whitespace')
        }

        It 'should return Content for all tokens' {
            $tokens.ForEach( { $_.Content } ) | Should -BeExactly @('{','           ','"Com\u0070a\u006ey"','           ',':','            ','"Pe\u0072miso\u0020Securi\u0074y"','           ',',','            ','"T\u0061gs"','              ',':','           ','[','           ','"Clo\u0075d"','             ',',','           ','"Identity"','           ',',','           ','"Sec\u0075\u0072ity"','              ',',','            ','"CDR (Cloud\u0020D\u0065tecti\u006fn \u0026 Respo\u006es\u0065)"','            ',']','            ',',','           ','"IDs"','              ',':','              ','[','            ','116','           ',',','            ','943','           ',',','            ','234.567','              ',',','             ','-38793.1','           ',']','             ',',','             ','"Tea\u006d"','             ',':','           ','{','              ','"Name"','             ',':','            ','"p\u0030 Lab\u0073"','           ',',','             ','"M\u0065m\u0062ers"','             ',':','             ','[','              ','{','              ','"FirstName"','            ',':','            ','"An\u0064i"','              ',',','           ','"\u004cast\u004e\u0061\u006de"','           ',':','           ','"A\u0068m\u0065ti"','            ','}','           ',',','              ','{','            ','"\u0046\u0069\u0072stN\u0061\u006d\u0065"','              ',':','              ','"M\u0065la"','            ',',','              ','"L\u0061stNa\u006de"','             ',':','             ','"Elezaj"','           ','}','            ',',','            ','{','              ','"Fi\u0072\u0073t\u004eame"','           ',':','           ','"Enisa"','            ',',','           ','"Last\u004eame"','           ',':','             ','"H\u006fxhaxhi\u006b\u0075"','           ','}','              ',',','           ','{','            ','"Firs\u0074Nam\u0065"','              ',':','              ','"A\u0062ia\u006e"','             ',',','           ','"\u004cas\u0074Nam\u0065"','              ',':','           ','"\u004d\u006f\u0072ina"','            ','}','           ',']','            ','}','              ',',','            ','"Mix\u0065\u0064Arra\u0079"','           ',':','            ','[','              ','"\u0073\u0074ri\u006e\u0067"','              ',',','             ','true','            ',',','            ','false','           ',',','              ','null','              ',',','           ','1337','           ',',','              ','13.37','           ',',','             ','-13.37','             ',']','             ','}','           ')
        }

        It 'should return re-concatenated Content for all tokens' {
            -join$tokens.ForEach( { $_.Content } ) | Should -BeExactly '{           "Com\u0070a\u006ey"           :            "Pe\u0072miso\u0020Securi\u0074y"           ,            "T\u0061gs"              :           [           "Clo\u0075d"             ,           "Identity"           ,           "Sec\u0075\u0072ity"              ,            "CDR (Cloud\u0020D\u0065tecti\u006fn \u0026 Respo\u006es\u0065)"            ]            ,           "IDs"              :              [            116           ,            943           ,            234.567              ,             -38793.1           ]             ,             "Tea\u006d"             :           {              "Name"             :            "p\u0030 Lab\u0073"           ,             "M\u0065m\u0062ers"             :             [              {              "FirstName"            :            "An\u0064i"              ,           "\u004cast\u004e\u0061\u006de"           :           "A\u0068m\u0065ti"            }           ,              {            "\u0046\u0069\u0072stN\u0061\u006d\u0065"              :              "M\u0065la"            ,              "L\u0061stNa\u006de"             :             "Elezaj"           }            ,            {              "Fi\u0072\u0073t\u004eame"           :           "Enisa"            ,           "Last\u004eame"           :             "H\u006fxhaxhi\u006b\u0075"           }              ,           {            "Firs\u0074Nam\u0065"              :              "A\u0062ia\u006e"             ,           "\u004cas\u0074Nam\u0065"              :           "\u004d\u006f\u0072ina"            }           ]            }              ,            "Mix\u0065\u0064Arra\u0079"           :            [              "\u0073\u0074ri\u006e\u0067"              ,             true            ,            false           ,              null              ,           1337           ,              13.37           ,             -13.37             ]             }           '
        }
    }
}

Describe 'Format-JsonObject -TrackModification -Target JsonTokenEnriched' -Tag 'Format-JsonObject','TrackModification','JsonTokenEnriched' {
    Context 'formatting JsonTokenEnriched tokens in policy (basic)' -Tag 'basic' {
        BeforeAll {
            $json = '{"Name":"SkyScalpel"}'
            $tokens = $json | Add-RandomWhitespace -RandomNodePercent 100 -RandomLength 5 -TrackModification -Target JsonTokenEnriched
            $tokens = $tokens | Format-JsonObject -TrackModification -Target JsonTokenEnriched
        }

        It 'should return token count' {
            $tokens.Count | Should -BeExactly 10
        }

        It 'should return Start for all tokens' {
            $tokens.ForEach( { $_.Start } ) | Should -BeExactly @(0,1,6,12,17,18,23,35,40,41)
        }

        It 'should return Length for all tokens' {
            $tokens.ForEach( { $_.Length } ) | Should -BeExactly @(1,5,6,5,1,5,12,5,1,5)
        }

        It 'should return Depth for all tokens' {
            $tokens.ForEach( { $_.Depth } ) | Should -BeExactly @(0,1,1,1,1,1,1,1,0,0)
        }

        It 'should return Modified for all tokens' {
            $tokens.ForEach( { $_.Modified } ) | Should -BeExactly @($null,$true,$null,$true,$null,$true,$null,$true,$null,$true)
        }

        It 'should return Type (and potential SubType and Format) for all tokens' {
            $tokensTypeSubType = $tokens.ForEach( { @($_.Type,$_.SubType,$_.Format).Where( { $_ } ) -join '.' } )
            $tokensTypeSubType | Should -BeExactly @('BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace')
        }

        It 'should return Path.Content for all tokens' {
            $tokens.ForEach( { $_.Path.Content } ) | Should -BeExactly @($null,$null,'Name','Name','Name','Name','Name',$null,$null,$null)
        }

        It 'should return Path.ContentDecoded for all tokens' {
            $tokens.ForEach( { $_.Path.ContentDecoded } ) | Should -BeExactly @($null,$null,'Name','Name','Name','Name','Name',$null,$null,$null)
        }

        It 'should return Content for all tokens' {
            $tokens.ForEach( { $_.Content } ) | Should -BeExactly @('{','     ','"Name"','     ',':','     ','"SkyScalpel"','     ','}','     ')
        }

        It 'should return ContentDecoded for all tokens' {
            $tokens.ForEach( { $_.ContentDecoded } ) | Should -BeExactly @('{','     ','"Name"','     ',':','     ','"SkyScalpel"','     ','}','     ')
        }

        It 'should return re-concatenated Content for all tokens' {
            -join$tokens.ForEach( { $_.Content } ) | Should -BeExactly '{     "Name"     :     "SkyScalpel"     }     '
        }

        It 'should return re-concatenated ContentDecoded for all tokens' {
            -join$tokens.ForEach( { $_.ContentDecoded } ) | Should -BeExactly '{     "Name"     :     "SkyScalpel"     }     '
        }
    }

    Context 'formatting JsonTokenEnriched tokens in policy (intermediate)' -Tag 'intermediate' {
        BeforeAll {
            $json = '{"Company":"Permiso Security","Tags":["Cloud","Identity","Security","CDR (Cloud Detection & Response)"],"IDs":[116,943,234.567,-38793.1],"Team":{"Name":"p0 Labs","Members":[{"FirstName":"Andi","LastName":"Ahmeti"},{"FirstName":"Mela","LastName":"Elezaj"},{"FirstName":"Enisa","LastName":"Hoxhaxhiku"},{"FirstName":"Abian","LastName":"Morina"}]},"MixedArray":["string",true,false,null,1337,13.37,-13.37]}'
            $tokens = $json | Add-RandomWhitespace -RandomNodePercent 100 -RandomLength 5 -TrackModification -Target JsonTokenEnriched
            $tokens = $tokens | Format-JsonObject -TrackModification -Target JsonTokenEnriched
        }

        It 'should return token count' {
            $tokens.Count | Should -BeExactly 198
        }

        It 'should return Start for all tokens' {
            $tokens.ForEach( { $_.Start } ) | Should -BeExactly @(0,1,6,15,20,21,26,44,49,50,55,61,66,67,72,73,78,85,90,91,96,106,111,112,117,127,132,133,138,172,177,178,183,184,189,194,199,200,205,206,211,214,219,220,225,228,233,234,239,246,251,252,257,265,270,271,276,277,282,288,293,294,299,300,305,311,316,317,322,331,336,337,342,351,356,357,362,363,368,369,374,385,390,391,396,402,407,408,413,423,428,429,434,442,447,448,453,454,459,460,465,476,481,482,487,493,498,499,504,514,519,520,525,533,538,539,544,545,550,551,556,567,572,573,578,585,590,591,596,606,611,612,617,629,634,635,640,641,646,647,652,663,668,669,674,681,686,687,692,702,707,708,713,721,726,727,732,733,738,739,744,745,750,762,767,768,773,774,779,787,792,793,798,802,807,808,813,818,823,824,829,833,838,839,844,848,853,854,859,864,869,870,875,881,886,887,892,893)
        }

        It 'should return Length for all tokens' {
            $tokens.ForEach( { $_.Length } ) | Should -BeExactly @(1,5,9,5,1,5,18,5,1,5,6,5,1,5,1,5,7,5,1,5,10,5,1,5,10,5,1,5,34,5,1,5,1,5,5,5,1,5,1,5,3,5,1,5,3,5,1,5,7,5,1,5,8,5,1,5,1,5,6,5,1,5,1,5,6,5,1,5,9,5,1,5,9,5,1,5,1,5,1,5,11,5,1,5,6,5,1,5,10,5,1,5,8,5,1,5,1,5,1,5,11,5,1,5,6,5,1,5,10,5,1,5,8,5,1,5,1,5,1,5,11,5,1,5,7,5,1,5,10,5,1,5,12,5,1,5,1,5,1,5,11,5,1,5,7,5,1,5,10,5,1,5,8,5,1,5,1,5,1,5,1,5,12,5,1,5,1,5,8,5,1,5,4,5,1,5,5,5,1,5,4,5,1,5,4,5,1,5,5,5,1,5,6,5,1,5,1,5)
        }

        It 'should return Depth for all tokens' {
            $tokens.ForEach( { $_.Depth } ) | Should -BeExactly @(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,0,0)
        }

        It 'should return Modified for all tokens' {
            $tokens.ForEach( { $_.Modified } ) | Should -BeExactly @($null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true)
        }

        It 'should return Type (and potential SubType and Format) for all tokens' {
            $tokensTypeSubType = $tokens.ForEach( { @($_.Type,$_.SubType,$_.Format).Where( { $_ } ) -join '.' } )
            $tokensTypeSubType | Should -BeExactly @('BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','EndArray','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','EndArray','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','EndArray','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Boolean','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Boolean','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Null','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','EndArray','Whitespace','EndObject','Whitespace')
        }

        It 'should return Path.Content for all tokens' {
            $tokens.ForEach( { $_.Path.Content } ) | Should -BeExactly @($null,$null,'Company','Company','Company','Company','Company',$null,$null,$null,'Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags',$null,$null,$null,'IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs',$null,$null,$null,'Team','Team','Team','Team','Team','Team','Team.Name','Team.Name','Team.Name','Team.Name','Team.Name','Team','Team','Team','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team','Team',$null,$null,$null,'MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray',$null,$null,$null)
        }

        It 'should return Path.ContentDecoded for all tokens' {
            $tokens.ForEach( { $_.Path.ContentDecoded } ) | Should -BeExactly @($null,$null,'Company','Company','Company','Company','Company',$null,$null,$null,'Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags',$null,$null,$null,'IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs',$null,$null,$null,'Team','Team','Team','Team','Team','Team','Team.Name','Team.Name','Team.Name','Team.Name','Team.Name','Team','Team','Team','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team','Team',$null,$null,$null,'MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray',$null,$null,$null)
        }

        It 'should return Content for all tokens' {
            $tokens.ForEach( { $_.Content } ) | Should -BeExactly @('{','     ','"Company"','     ',':','     ','"Permiso Security"','     ',',','     ','"Tags"','     ',':','     ','[','     ','"Cloud"','     ',',','     ','"Identity"','     ',',','     ','"Security"','     ',',','     ','"CDR (Cloud Detection & Response)"','     ',']','     ',',','     ','"IDs"','     ',':','     ','[','     ','116','     ',',','     ','943','     ',',','     ','234.567','     ',',','     ','-38793.1','     ',']','     ',',','     ','"Team"','     ',':','     ','{','     ','"Name"','     ',':','     ','"p0 Labs"','     ',',','     ','"Members"','     ',':','     ','[','     ','{','     ','"FirstName"','     ',':','     ','"Andi"','     ',',','     ','"LastName"','     ',':','     ','"Ahmeti"','     ','}','     ',',','     ','{','     ','"FirstName"','     ',':','     ','"Mela"','     ',',','     ','"LastName"','     ',':','     ','"Elezaj"','     ','}','     ',',','     ','{','     ','"FirstName"','     ',':','     ','"Enisa"','     ',',','     ','"LastName"','     ',':','     ','"Hoxhaxhiku"','     ','}','     ',',','     ','{','     ','"FirstName"','     ',':','     ','"Abian"','     ',',','     ','"LastName"','     ',':','     ','"Morina"','     ','}','     ',']','     ','}','     ',',','     ','"MixedArray"','     ',':','     ','[','     ','"string"','     ',',','     ','true','     ',',','     ','false','     ',',','     ','null','     ',',','     ','1337','     ',',','     ','13.37','     ',',','     ','-13.37','     ',']','     ','}','     ')
        }

        It 'should return ContentDecoded for all tokens' {
            $tokens.ForEach( { $_.ContentDecoded } ) | Should -BeExactly @('{','     ','"Company"','     ',':','     ','"Permiso Security"','     ',',','     ','"Tags"','     ',':','     ','[','     ','"Cloud"','     ',',','     ','"Identity"','     ',',','     ','"Security"','     ',',','     ','"CDR (Cloud Detection & Response)"','     ',']','     ',',','     ','"IDs"','     ',':','     ','[','     ','116','     ',',','     ','943','     ',',','     ','234.567','     ',',','     ','-38793.1','     ',']','     ',',','     ','"Team"','     ',':','     ','{','     ','"Name"','     ',':','     ','"p0 Labs"','     ',',','     ','"Members"','     ',':','     ','[','     ','{','     ','"FirstName"','     ',':','     ','"Andi"','     ',',','     ','"LastName"','     ',':','     ','"Ahmeti"','     ','}','     ',',','     ','{','     ','"FirstName"','     ',':','     ','"Mela"','     ',',','     ','"LastName"','     ',':','     ','"Elezaj"','     ','}','     ',',','     ','{','     ','"FirstName"','     ',':','     ','"Enisa"','     ',',','     ','"LastName"','     ',':','     ','"Hoxhaxhiku"','     ','}','     ',',','     ','{','     ','"FirstName"','     ',':','     ','"Abian"','     ',',','     ','"LastName"','     ',':','     ','"Morina"','     ','}','     ',']','     ','}','     ',',','     ','"MixedArray"','     ',':','     ','[','     ','"string"','     ',',','     ','true','     ',',','     ','false','     ',',','     ','null','     ',',','     ','1337','     ',',','     ','13.37','     ',',','     ','-13.37','     ',']','     ','}','     ')
        }

        It 'should return re-concatenated Content for all tokens' {
            -join$tokens.ForEach( { $_.Content } ) | Should -BeExactly '{     "Company"     :     "Permiso Security"     ,     "Tags"     :     [     "Cloud"     ,     "Identity"     ,     "Security"     ,     "CDR (Cloud Detection & Response)"     ]     ,     "IDs"     :     [     116     ,     943     ,     234.567     ,     -38793.1     ]     ,     "Team"     :     {     "Name"     :     "p0 Labs"     ,     "Members"     :     [     {     "FirstName"     :     "Andi"     ,     "LastName"     :     "Ahmeti"     }     ,     {     "FirstName"     :     "Mela"     ,     "LastName"     :     "Elezaj"     }     ,     {     "FirstName"     :     "Enisa"     ,     "LastName"     :     "Hoxhaxhiku"     }     ,     {     "FirstName"     :     "Abian"     ,     "LastName"     :     "Morina"     }     ]     }     ,     "MixedArray"     :     [     "string"     ,     true     ,     false     ,     null     ,     1337     ,     13.37     ,     -13.37     ]     }     '
        }

        It 'should return re-concatenated ContentDecoded for all tokens' {
            -join$tokens.ForEach( { $_.ContentDecoded } ) | Should -BeExactly '{     "Company"     :     "Permiso Security"     ,     "Tags"     :     [     "Cloud"     ,     "Identity"     ,     "Security"     ,     "CDR (Cloud Detection & Response)"     ]     ,     "IDs"     :     [     116     ,     943     ,     234.567     ,     -38793.1     ]     ,     "Team"     :     {     "Name"     :     "p0 Labs"     ,     "Members"     :     [     {     "FirstName"     :     "Andi"     ,     "LastName"     :     "Ahmeti"     }     ,     {     "FirstName"     :     "Mela"     ,     "LastName"     :     "Elezaj"     }     ,     {     "FirstName"     :     "Enisa"     ,     "LastName"     :     "Hoxhaxhiku"     }     ,     {     "FirstName"     :     "Abian"     ,     "LastName"     :     "Morina"     }     ]     }     ,     "MixedArray"     :     [     "string"     ,     true     ,     false     ,     null     ,     1337     ,     13.37     ,     -13.37     ]     }     '
        }
    }

    Context 'formatting JsonTokenEnriched tokens in policy (advanced)' -Tag 'advanced' {
        BeforeAll {
            $json = '{ "Com\u0070a\u006ey" :  "Pe\u0072miso\u0020Securi\u0074y" ,  "T\u0061gs"    : [ "Clo\u0075d"   , "Identity" , "Sec\u0075\u0072ity"    ,  "CDR (Cloud\u0020D\u0065tecti\u006fn \u0026 Respo\u006es\u0065)"  ]  , "IDs"    :    [  116 ,  943 ,  234.567    ,   -38793.1 ]   ,   "Tea\u006d"   : {    "Name"   :  "p\u0030 Lab\u0073" ,   "M\u0065m\u0062ers"   :   [    {    "FirstName"  :  "An\u0064i"    , "\u004cast\u004e\u0061\u006de" : "A\u0068m\u0065ti"  } ,    {  "\u0046\u0069\u0072stN\u0061\u006d\u0065"    :    "M\u0065la"  ,    "L\u0061stNa\u006de"   :   "Elezaj" }  ,  {    "Fi\u0072\u0073t\u004eame" : "Enisa"  , "Last\u004eame" :   "H\u006fxhaxhi\u006b\u0075" }    , {  "Firs\u0074Nam\u0065"    :    "A\u0062ia\u006e"   , "\u004cas\u0074Nam\u0065"    : "\u004d\u006f\u0072ina"  } ]  }    ,  "Mix\u0065\u0064Arra\u0079" :  [    "\u0073\u0074ri\u006e\u0067"    ,   true  ,  false ,    null    , 1337 ,    13.37 ,   -13.37   ]   } '
            $tokens = $json | Add-RandomWhitespace -RandomNodePercent 100 -RandomLength 5 -TrackModification -Target JsonTokenEnriched
            $tokens = $tokens | Format-JsonObject -TrackModification -Target JsonTokenEnriched
        }

        It 'should return token count' {
            $tokens.Count | Should -BeExactly 198
        }

        It 'should return Start for all tokens' {
            $tokens.ForEach( { $_.Start } ) | Should -BeExactly @(0,1,12,31,42,43,55,88,99,100,112,123,137,138,149,150,161,173,186,187,198,208,219,220,231,251,265,266,278,342,354,355,367,368,379,384,398,399,413,414,426,429,440,441,453,456,467,468,480,487,501,502,515,523,534,535,548,549,562,573,586,587,598,599,613,619,632,633,645,664,675,676,689,708,721,722,735,736,750,751,765,776,788,789,801,812,826,827,838,868,879,880,891,909,921,922,933,934,948,949,961,1002,1016,1017,1031,1042,1054,1055,1069,1089,1102,1103,1116,1124,1135,1136,1148,1149,1161,1162,1176,1202,1213,1214,1225,1232,1244,1245,1256,1271,1282,1283,1296,1323,1334,1335,1349,1350,1361,1362,1374,1395,1409,1410,1424,1441,1454,1455,1466,1491,1505,1506,1517,1540,1552,1553,1564,1565,1577,1578,1592,1593,1605,1632,1643,1644,1656,1657,1671,1699,1713,1714,1727,1731,1743,1744,1756,1761,1772,1773,1787,1791,1805,1806,1817,1821,1832,1833,1847,1852,1863,1864,1877,1883,1896,1897,1910,1911)
        }

        It 'should return Length for all tokens' {
            $tokens.ForEach( { $_.Length } ) | Should -BeExactly @(1,11,19,11,1,12,33,11,1,12,11,14,1,11,1,11,12,13,1,11,10,11,1,11,20,14,1,12,64,12,1,12,1,11,5,14,1,14,1,12,3,11,1,12,3,11,1,12,7,14,1,13,8,11,1,13,1,13,11,13,1,11,1,14,6,13,1,12,19,11,1,13,19,13,1,13,1,14,1,14,11,12,1,12,11,14,1,11,30,11,1,11,18,12,1,11,1,14,1,12,41,14,1,14,11,12,1,14,20,13,1,13,8,11,1,12,1,12,1,14,26,11,1,11,7,12,1,11,15,11,1,13,27,11,1,14,1,11,1,12,21,14,1,14,17,13,1,11,25,14,1,11,23,12,1,11,1,12,1,14,1,12,27,11,1,12,1,14,28,14,1,13,4,12,1,12,5,11,1,14,4,14,1,11,4,11,1,14,5,11,1,13,6,13,1,13,1,11)
        }

        It 'should return Depth for all tokens' {
            $tokens.ForEach( { $_.Depth } ) | Should -BeExactly @(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,0,0)
        }

        It 'should return Modified for all tokens' {
            $tokens.ForEach( { $_.Modified } ) | Should -BeExactly @($null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true,$null,$true)
        }

        It 'should return Type (and potential SubType and Format) for all tokens' {
            $tokensTypeSubType = $tokens.ForEach( { @($_.Type,$_.SubType,$_.Format).Where( { $_ } ) -join '.' } )
            $tokensTypeSubType | Should -BeExactly @('BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.String','Whitespace','EndArray','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','EndArray','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','BeginObject','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','Value.ObjectMember.String','Whitespace','EndObject','Whitespace','EndArray','Whitespace','EndObject','Whitespace','ValueSeparator','Whitespace','Name.ObjectMember.String','Whitespace','NameSeparator','Whitespace','BeginArray','Whitespace','Value.ArrayElement.String','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Boolean','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Boolean','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Null','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','ValueSeparator','Whitespace','Value.ArrayElement.Number','Whitespace','EndArray','Whitespace','EndObject','Whitespace')
        }

        It 'should return Path.Content for all tokens' {
            $tokens.ForEach( { $_.Path.Content } ) | Should -BeExactly @($null,$null,'Com\u0070a\u006ey','Com\u0070a\u006ey','Com\u0070a\u006ey','Com\u0070a\u006ey','Com\u0070a\u006ey',$null,$null,$null,'T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs','T\u0061gs',$null,$null,$null,'IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs',$null,$null,$null,'Tea\u006d','Tea\u006d','Tea\u006d','Tea\u006d','Tea\u006d','Tea\u006d','Tea\u006d.Name','Tea\u006d.Name','Tea\u006d.Name','Tea\u006d.Name','Tea\u006d.Name','Tea\u006d','Tea\u006d','Tea\u006d','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers.FirstName','Tea\u006d.M\u0065m\u0062ers.FirstName','Tea\u006d.M\u0065m\u0062ers.FirstName','Tea\u006d.M\u0065m\u0062ers.FirstName','Tea\u006d.M\u0065m\u0062ers.FirstName','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers.\u004cast\u004e\u0061\u006de','Tea\u006d.M\u0065m\u0062ers.\u004cast\u004e\u0061\u006de','Tea\u006d.M\u0065m\u0062ers.\u004cast\u004e\u0061\u006de','Tea\u006d.M\u0065m\u0062ers.\u004cast\u004e\u0061\u006de','Tea\u006d.M\u0065m\u0062ers.\u004cast\u004e\u0061\u006de','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers.\u0046\u0069\u0072stN\u0061\u006d\u0065','Tea\u006d.M\u0065m\u0062ers.\u0046\u0069\u0072stN\u0061\u006d\u0065','Tea\u006d.M\u0065m\u0062ers.\u0046\u0069\u0072stN\u0061\u006d\u0065','Tea\u006d.M\u0065m\u0062ers.\u0046\u0069\u0072stN\u0061\u006d\u0065','Tea\u006d.M\u0065m\u0062ers.\u0046\u0069\u0072stN\u0061\u006d\u0065','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers.L\u0061stNa\u006de','Tea\u006d.M\u0065m\u0062ers.L\u0061stNa\u006de','Tea\u006d.M\u0065m\u0062ers.L\u0061stNa\u006de','Tea\u006d.M\u0065m\u0062ers.L\u0061stNa\u006de','Tea\u006d.M\u0065m\u0062ers.L\u0061stNa\u006de','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers.Fi\u0072\u0073t\u004eame','Tea\u006d.M\u0065m\u0062ers.Fi\u0072\u0073t\u004eame','Tea\u006d.M\u0065m\u0062ers.Fi\u0072\u0073t\u004eame','Tea\u006d.M\u0065m\u0062ers.Fi\u0072\u0073t\u004eame','Tea\u006d.M\u0065m\u0062ers.Fi\u0072\u0073t\u004eame','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers.Last\u004eame','Tea\u006d.M\u0065m\u0062ers.Last\u004eame','Tea\u006d.M\u0065m\u0062ers.Last\u004eame','Tea\u006d.M\u0065m\u0062ers.Last\u004eame','Tea\u006d.M\u0065m\u0062ers.Last\u004eame','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers.Firs\u0074Nam\u0065','Tea\u006d.M\u0065m\u0062ers.Firs\u0074Nam\u0065','Tea\u006d.M\u0065m\u0062ers.Firs\u0074Nam\u0065','Tea\u006d.M\u0065m\u0062ers.Firs\u0074Nam\u0065','Tea\u006d.M\u0065m\u0062ers.Firs\u0074Nam\u0065','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers.\u004cas\u0074Nam\u0065','Tea\u006d.M\u0065m\u0062ers.\u004cas\u0074Nam\u0065','Tea\u006d.M\u0065m\u0062ers.\u004cas\u0074Nam\u0065','Tea\u006d.M\u0065m\u0062ers.\u004cas\u0074Nam\u0065','Tea\u006d.M\u0065m\u0062ers.\u004cas\u0074Nam\u0065','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d.M\u0065m\u0062ers','Tea\u006d','Tea\u006d',$null,$null,$null,'Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079','Mix\u0065\u0064Arra\u0079',$null,$null,$null)
        }

        It 'should return Path.ContentDecoded for all tokens' {
            $tokens.ForEach( { $_.Path.ContentDecoded } ) | Should -BeExactly @($null,$null,'Company','Company','Company','Company','Company',$null,$null,$null,'Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags','Tags',$null,$null,$null,'IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs','IDs',$null,$null,$null,'Team','Team','Team','Team','Team','Team','Team.Name','Team.Name','Team.Name','Team.Name','Team.Name','Team','Team','Team','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members.FirstName','Team.Members','Team.Members','Team.Members','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members.LastName','Team.Members','Team.Members','Team.Members','Team.Members','Team','Team',$null,$null,$null,'MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray','MixedArray',$null,$null,$null)
        }

        It 'should return Content for all tokens' {
            $tokens.ForEach( { $_.Content } ) | Should -BeExactly @('{','           ','"Com\u0070a\u006ey"','           ',':','            ','"Pe\u0072miso\u0020Securi\u0074y"','           ',',','            ','"T\u0061gs"','              ',':','           ','[','           ','"Clo\u0075d"','             ',',','           ','"Identity"','           ',',','           ','"Sec\u0075\u0072ity"','              ',',','            ','"CDR (Cloud\u0020D\u0065tecti\u006fn \u0026 Respo\u006es\u0065)"','            ',']','            ',',','           ','"IDs"','              ',':','              ','[','            ','116','           ',',','            ','943','           ',',','            ','234.567','              ',',','             ','-38793.1','           ',']','             ',',','             ','"Tea\u006d"','             ',':','           ','{','              ','"Name"','             ',':','            ','"p\u0030 Lab\u0073"','           ',',','             ','"M\u0065m\u0062ers"','             ',':','             ','[','              ','{','              ','"FirstName"','            ',':','            ','"An\u0064i"','              ',',','           ','"\u004cast\u004e\u0061\u006de"','           ',':','           ','"A\u0068m\u0065ti"','            ','}','           ',',','              ','{','            ','"\u0046\u0069\u0072stN\u0061\u006d\u0065"','              ',':','              ','"M\u0065la"','            ',',','              ','"L\u0061stNa\u006de"','             ',':','             ','"Elezaj"','           ','}','            ',',','            ','{','              ','"Fi\u0072\u0073t\u004eame"','           ',':','           ','"Enisa"','            ',',','           ','"Last\u004eame"','           ',':','             ','"H\u006fxhaxhi\u006b\u0075"','           ','}','              ',',','           ','{','            ','"Firs\u0074Nam\u0065"','              ',':','              ','"A\u0062ia\u006e"','             ',',','           ','"\u004cas\u0074Nam\u0065"','              ',':','           ','"\u004d\u006f\u0072ina"','            ','}','           ',']','            ','}','              ',',','            ','"Mix\u0065\u0064Arra\u0079"','           ',':','            ','[','              ','"\u0073\u0074ri\u006e\u0067"','              ',',','             ','true','            ',',','            ','false','           ',',','              ','null','              ',',','           ','1337','           ',',','              ','13.37','           ',',','             ','-13.37','             ',']','             ','}','           ')
        }

        It 'should return ContentDecoded for all tokens' {
            $tokens.ForEach( { $_.ContentDecoded } ) | Should -BeExactly @('{','           ','"Company"','           ',':','            ','"Permiso Security"','           ',',','            ','"Tags"','              ',':','           ','[','           ','"Cloud"','             ',',','           ','"Identity"','           ',',','           ','"Security"','              ',',','            ','"CDR (Cloud Detection & Response)"','            ',']','            ',',','           ','"IDs"','              ',':','              ','[','            ','116','           ',',','            ','943','           ',',','            ','234.567','              ',',','             ','-38793.1','           ',']','             ',',','             ','"Team"','             ',':','           ','{','              ','"Name"','             ',':','            ','"p0 Labs"','           ',',','             ','"Members"','             ',':','             ','[','              ','{','              ','"FirstName"','            ',':','            ','"Andi"','              ',',','           ','"LastName"','           ',':','           ','"Ahmeti"','            ','}','           ',',','              ','{','            ','"FirstName"','              ',':','              ','"Mela"','            ',',','              ','"LastName"','             ',':','             ','"Elezaj"','           ','}','            ',',','            ','{','              ','"FirstName"','           ',':','           ','"Enisa"','            ',',','           ','"LastName"','           ',':','             ','"Hoxhaxhiku"','           ','}','              ',',','           ','{','            ','"FirstName"','              ',':','              ','"Abian"','             ',',','           ','"LastName"','              ',':','           ','"Morina"','            ','}','           ',']','            ','}','              ',',','            ','"MixedArray"','           ',':','            ','[','              ','"string"','              ',',','             ','true','            ',',','            ','false','           ',',','              ','null','              ',',','           ','1337','           ',',','              ','13.37','           ',',','             ','-13.37','             ',']','             ','}','           ')
        }

        It 'should return re-concatenated Content for all tokens' {
            -join$tokens.ForEach( { $_.Content } ) | Should -BeExactly '{           "Com\u0070a\u006ey"           :            "Pe\u0072miso\u0020Securi\u0074y"           ,            "T\u0061gs"              :           [           "Clo\u0075d"             ,           "Identity"           ,           "Sec\u0075\u0072ity"              ,            "CDR (Cloud\u0020D\u0065tecti\u006fn \u0026 Respo\u006es\u0065)"            ]            ,           "IDs"              :              [            116           ,            943           ,            234.567              ,             -38793.1           ]             ,             "Tea\u006d"             :           {              "Name"             :            "p\u0030 Lab\u0073"           ,             "M\u0065m\u0062ers"             :             [              {              "FirstName"            :            "An\u0064i"              ,           "\u004cast\u004e\u0061\u006de"           :           "A\u0068m\u0065ti"            }           ,              {            "\u0046\u0069\u0072stN\u0061\u006d\u0065"              :              "M\u0065la"            ,              "L\u0061stNa\u006de"             :             "Elezaj"           }            ,            {              "Fi\u0072\u0073t\u004eame"           :           "Enisa"            ,           "Last\u004eame"           :             "H\u006fxhaxhi\u006b\u0075"           }              ,           {            "Firs\u0074Nam\u0065"              :              "A\u0062ia\u006e"             ,           "\u004cas\u0074Nam\u0065"              :           "\u004d\u006f\u0072ina"            }           ]            }              ,            "Mix\u0065\u0064Arra\u0079"           :            [              "\u0073\u0074ri\u006e\u0067"              ,             true            ,            false           ,              null              ,           1337           ,              13.37           ,             -13.37             ]             }           '
        }

        It 'should return re-concatenated ContentDecoded for all tokens' {
            -join$tokens.ForEach( { $_.ContentDecoded } ) | Should -BeExactly '{           "Company"           :            "Permiso Security"           ,            "Tags"              :           [           "Cloud"             ,           "Identity"           ,           "Security"              ,            "CDR (Cloud Detection & Response)"            ]            ,           "IDs"              :              [            116           ,            943           ,            234.567              ,             -38793.1           ]             ,             "Team"             :           {              "Name"             :            "p0 Labs"           ,             "Members"             :             [              {              "FirstName"            :            "Andi"              ,           "LastName"           :           "Ahmeti"            }           ,              {            "FirstName"              :              "Mela"            ,              "LastName"             :             "Elezaj"           }            ,            {              "FirstName"           :           "Enisa"            ,           "LastName"           :             "Hoxhaxhiku"           }              ,           {            "FirstName"              :              "Abian"             ,           "LastName"              :           "Morina"            }           ]            }              ,            "MixedArray"           :            [              "string"              ,             true            ,            false           ,              null              ,           1337           ,              13.37           ,             -13.37             ]             }           '
        }
    }
}